# How this works:
# When running the script, it enables the PR merge requirement so that a review by a code-owner is needed
# Most devs aren't code-owners, so PR's can't be merged.

# The script needs:

# 1) The branch to be protected: https://github.com/TheOddler/github-actions-tests/settings/branches
# 2) The setting for "Require approvals" to be enabled (otherwise it will set it to 1)
# 3) A PAT token (currently called `MY_PAT`) with enough access rights

# What would be better:
# Toggling the `locked` protection, but that can't be done through API (the API that allows setting the locked protection requires you to set a bunch of other stuff too, which I don't want to override)

# Alt: You can just manually check the `locked` toggle and all is good.

name: Disable merging

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      duration:
        description: How long to disable merging. Suffix may be 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
        default: '3h'
        required: true
      branch:
        description: What branch to protect
        default: main
        required: true

jobs:

  find_protection_rule:
    name: Finding the protection rule
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.MY_PAT }}
    outputs:
      protection_rule_id: ${{ steps.parse_id.outputs.id }}
    steps:
    - uses: octokit/graphql-action@v2.2.1
      id: graphql_query
      with:
        query: |
          query getBranchProtectionRules($owner:String!,$repo:String!) {
            repository(owner:$owner, name:$repo) {
              branchProtectionRules(first: 1) {
                nodes {
                  pattern
                  id
                }
              }
            }
          }
        owner: ${{ github.repository_owner }}
        repo: ${{ github.event.repository.name }}
    - name: Parse json and get ID
      id: parse_id
      run: |
        echo "id=${{ fromJson(steps.graphql_query.outputs.data).repository.branchProtectionRules.nodes[0].id }}" >> "$GITHUB_OUTPUT"


  lock_branch:
    name: Lock branch
    runs-on: ubuntu-latest
    needs: find_protection_rule
    env:
      GITHUB_TOKEN: ${{ secrets.MY_PAT }}
    steps:
    - name: Lock branch
      uses: octokit/graphql-action@v2.2.1
      id: lock_branch
      with:
        query: |
          mutation lockBranch($ruleid:ID!) {
            updateBranchProtectionRule(input:{
              branchProtectionRuleId: $ruleid,
              lockBranch: true
            }) {
              branchProtectionRule {
                id
                lockBranch
              }
            }
          }
        ruleid: ${{ needs.find_protection_rule.outputs.protection_rule_id }}


  wait:
    name: Wait
    needs: lock_branch
    runs-on: ubuntu-latest
    steps:
    - name: Wait the allotted time
      uses: jakejarvis/wait-action@master
      with:
        time: '${{ github.event.inputs.duration }}'


  unlock_branch:
    name: Unlock branch
    runs-on: ubuntu-latest
    needs: [find_protection_rule, wait]
    if: ${{ needs.find_protection_rule.result == "success" }} # Run this even if "wait" fails or is cancelled, we only care that find_protection_rule succeeded
    env:
      GITHUB_TOKEN: ${{ secrets.MY_PAT }}
    steps:
    - name: Lock branch
      uses: octokit/graphql-action@v2.2.1
      id: lock_branch
      with:
        query: |
          mutation lockBranch($ruleid:ID!) {
            updateBranchProtectionRule(input:{
              branchProtectionRuleId: $ruleid,
              lockBranch: false
            }) {
              branchProtectionRule {
                id
                lockBranch
              }
            }
          }
        ruleid: ${{ needs.find_protection_rule.outputs.protection_rule_id }}
